// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file landmark_msg.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _LANDMARK_MSG_H_
#define _LANDMARK_MSG_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(landmark_msg_SOURCE)
#define landmark_msg_DllAPI __declspec( dllexport )
#else
#define landmark_msg_DllAPI __declspec( dllimport )
#endif // landmark_msg_SOURCE
#else
#define landmark_msg_DllAPI
#endif
#else
#define landmark_msg_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

/*!
 * @brief This class represents the structure landmark_msg defined by the user in the IDL file.
 * @ingroup LANDMARK_MSG
 */
class landmark_msg
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport landmark_msg();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~landmark_msg();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object landmark_msg that will be copied.
     */
    eProsima_user_DllExport landmark_msg(const landmark_msg &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object landmark_msg that will be copied.
     */
    eProsima_user_DllExport landmark_msg(landmark_msg &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object landmark_msg that will be copied.
     */
    eProsima_user_DllExport landmark_msg& operator=(const landmark_msg &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object landmark_msg that will be copied.
     */
    eProsima_user_DllExport landmark_msg& operator=(landmark_msg &&x);
    
    /*!
     * @brief This function sets a value in member timestamp_secs
     * @param _timestamp_secs New value for member timestamp_secs
     */
    inline eProsima_user_DllExport void timestamp_secs(uint32_t _timestamp_secs)
    {
        m_timestamp_secs = _timestamp_secs;
    }

    /*!
     * @brief This function returns the value of member timestamp_secs
     * @return Value of member timestamp_secs
     */
    inline eProsima_user_DllExport uint32_t timestamp_secs() const
    {
        return m_timestamp_secs;
    }

    /*!
     * @brief This function returns a reference to member timestamp_secs
     * @return Reference to member timestamp_secs
     */
    inline eProsima_user_DllExport uint32_t& timestamp_secs()
    {
        return m_timestamp_secs;
    }
    /*!
     * @brief This function sets a value in member timestamp_nsecs
     * @param _timestamp_nsecs New value for member timestamp_nsecs
     */
    inline eProsima_user_DllExport void timestamp_nsecs(uint32_t _timestamp_nsecs)
    {
        m_timestamp_nsecs = _timestamp_nsecs;
    }

    /*!
     * @brief This function returns the value of member timestamp_nsecs
     * @return Value of member timestamp_nsecs
     */
    inline eProsima_user_DllExport uint32_t timestamp_nsecs() const
    {
        return m_timestamp_nsecs;
    }

    /*!
     * @brief This function returns a reference to member timestamp_nsecs
     * @return Reference to member timestamp_nsecs
     */
    inline eProsima_user_DllExport uint32_t& timestamp_nsecs()
    {
        return m_timestamp_nsecs;
    }
    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    inline eProsima_user_DllExport void id(int64_t _id)
    {
        m_id = _id;
    }

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    inline eProsima_user_DllExport int64_t id() const
    {
        return m_id;
    }

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    inline eProsima_user_DllExport int64_t& id()
    {
        return m_id;
    }
    /*!
     * @brief This function copies the value in member landmark_to_tracking_transform_translation
     * @param _landmark_to_tracking_transform_translation New value to be copied in member landmark_to_tracking_transform_translation
     */
    inline eProsima_user_DllExport void landmark_to_tracking_transform_translation(const std::vector<float> &_landmark_to_tracking_transform_translation)
    {
        m_landmark_to_tracking_transform_translation = _landmark_to_tracking_transform_translation;
    }

    /*!
     * @brief This function moves the value in member landmark_to_tracking_transform_translation
     * @param _landmark_to_tracking_transform_translation New value to be moved in member landmark_to_tracking_transform_translation
     */
    inline eProsima_user_DllExport void landmark_to_tracking_transform_translation(std::vector<float> &&_landmark_to_tracking_transform_translation)
    {
        m_landmark_to_tracking_transform_translation = std::move(_landmark_to_tracking_transform_translation);
    }

    /*!
     * @brief This function returns a constant reference to member landmark_to_tracking_transform_translation
     * @return Constant reference to member landmark_to_tracking_transform_translation
     */
    inline eProsima_user_DllExport const std::vector<float>& landmark_to_tracking_transform_translation() const
    {
        return m_landmark_to_tracking_transform_translation;
    }

    /*!
     * @brief This function returns a reference to member landmark_to_tracking_transform_translation
     * @return Reference to member landmark_to_tracking_transform_translation
     */
    inline eProsima_user_DllExport std::vector<float>& landmark_to_tracking_transform_translation()
    {
        return m_landmark_to_tracking_transform_translation;
    }
    /*!
     * @brief This function copies the value in member landmark_to_tracking_transform_rotation
     * @param _landmark_to_tracking_transform_rotation New value to be copied in member landmark_to_tracking_transform_rotation
     */
    inline eProsima_user_DllExport void landmark_to_tracking_transform_rotation(const std::vector<float> &_landmark_to_tracking_transform_rotation)
    {
        m_landmark_to_tracking_transform_rotation = _landmark_to_tracking_transform_rotation;
    }

    /*!
     * @brief This function moves the value in member landmark_to_tracking_transform_rotation
     * @param _landmark_to_tracking_transform_rotation New value to be moved in member landmark_to_tracking_transform_rotation
     */
    inline eProsima_user_DllExport void landmark_to_tracking_transform_rotation(std::vector<float> &&_landmark_to_tracking_transform_rotation)
    {
        m_landmark_to_tracking_transform_rotation = std::move(_landmark_to_tracking_transform_rotation);
    }

    /*!
     * @brief This function returns a constant reference to member landmark_to_tracking_transform_rotation
     * @return Constant reference to member landmark_to_tracking_transform_rotation
     */
    inline eProsima_user_DllExport const std::vector<float>& landmark_to_tracking_transform_rotation() const
    {
        return m_landmark_to_tracking_transform_rotation;
    }

    /*!
     * @brief This function returns a reference to member landmark_to_tracking_transform_rotation
     * @return Reference to member landmark_to_tracking_transform_rotation
     */
    inline eProsima_user_DllExport std::vector<float>& landmark_to_tracking_transform_rotation()
    {
        return m_landmark_to_tracking_transform_rotation;
    }
    /*!
     * @brief This function sets a value in member translation_weight
     * @param _translation_weight New value for member translation_weight
     */
    inline eProsima_user_DllExport void translation_weight(double _translation_weight)
    {
        m_translation_weight = _translation_weight;
    }

    /*!
     * @brief This function returns the value of member translation_weight
     * @return Value of member translation_weight
     */
    inline eProsima_user_DllExport double translation_weight() const
    {
        return m_translation_weight;
    }

    /*!
     * @brief This function returns a reference to member translation_weight
     * @return Reference to member translation_weight
     */
    inline eProsima_user_DllExport double& translation_weight()
    {
        return m_translation_weight;
    }
    /*!
     * @brief This function sets a value in member rotation_weight
     * @param _rotation_weight New value for member rotation_weight
     */
    inline eProsima_user_DllExport void rotation_weight(double _rotation_weight)
    {
        m_rotation_weight = _rotation_weight;
    }

    /*!
     * @brief This function returns the value of member rotation_weight
     * @return Value of member rotation_weight
     */
    inline eProsima_user_DllExport double rotation_weight() const
    {
        return m_rotation_weight;
    }

    /*!
     * @brief This function returns a reference to member rotation_weight
     * @return Reference to member rotation_weight
     */
    inline eProsima_user_DllExport double& rotation_weight()
    {
        return m_rotation_weight;
    }
    /*!
     * @brief This function sets a value in member type
     * @param _type New value for member type
     */
    inline eProsima_user_DllExport void type(uint32_t _type)
    {
        m_type = _type;
    }

    /*!
     * @brief This function returns the value of member type
     * @return Value of member type
     */
    inline eProsima_user_DllExport uint32_t type() const
    {
        return m_type;
    }

    /*!
     * @brief This function returns a reference to member type
     * @return Reference to member type
     */
    inline eProsima_user_DllExport uint32_t& type()
    {
        return m_type;
    }
    /*!
     * @brief This function copies the value in member code
     * @param _code New value to be copied in member code
     */
    inline eProsima_user_DllExport void code(const std::string &_code)
    {
        m_code = _code;
    }

    /*!
     * @brief This function moves the value in member code
     * @param _code New value to be moved in member code
     */
    inline eProsima_user_DllExport void code(std::string &&_code)
    {
        m_code = std::move(_code);
    }

    /*!
     * @brief This function returns a constant reference to member code
     * @return Constant reference to member code
     */
    inline eProsima_user_DllExport const std::string& code() const
    {
        return m_code;
    }

    /*!
     * @brief This function returns a reference to member code
     * @return Reference to member code
     */
    inline eProsima_user_DllExport std::string& code()
    {
        return m_code;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const landmark_msg& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    uint32_t m_timestamp_secs;
    uint32_t m_timestamp_nsecs;
    int64_t m_id;
    std::vector<float> m_landmark_to_tracking_transform_translation;
    std::vector<float> m_landmark_to_tracking_transform_rotation;
    double m_translation_weight;
    double m_rotation_weight;
    uint32_t m_type;
    std::string m_code;
};

#endif // _LANDMARK_MSG_H_