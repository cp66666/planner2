// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file upgoing_msg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "upgoing_msg.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

commander_msg::UpgoingMsg::UpgoingMsg()
{
}

commander_msg::UpgoingMsg::~UpgoingMsg()
{
}

commander_msg::UpgoingMsg::UpgoingMsg(const UpgoingMsg &x)
{
    m_upgoing_msg = x.m_upgoing_msg;
}

commander_msg::UpgoingMsg::UpgoingMsg(UpgoingMsg &&x)
{
    m_upgoing_msg = std::move(x.m_upgoing_msg);
}

commander_msg::UpgoingMsg& commander_msg::UpgoingMsg::operator=(const UpgoingMsg &x)
{
    m_upgoing_msg = x.m_upgoing_msg;
    
    return *this;
}

commander_msg::UpgoingMsg& commander_msg::UpgoingMsg::operator=(UpgoingMsg &&x)
{
    m_upgoing_msg = std::move(x.m_upgoing_msg);
    
    return *this;
}

size_t commander_msg::UpgoingMsg::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 10000 + 1;

    return current_alignment - initial_alignment;
}

size_t commander_msg::UpgoingMsg::getCdrSerializedSize(const commander_msg::UpgoingMsg& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.upgoing_msg().size() + 1;

    return current_alignment - initial_alignment;
}

void commander_msg::UpgoingMsg::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_upgoing_msg;
}

void commander_msg::UpgoingMsg::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_upgoing_msg;
}

size_t commander_msg::UpgoingMsg::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            

    return current_align;
}

bool commander_msg::UpgoingMsg::isKeyDefined()
{
    return false;
}

void commander_msg::UpgoingMsg::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
}
