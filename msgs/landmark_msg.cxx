// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file landmark_msg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "landmark_msg.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

landmark_msg::landmark_msg()
{
    m_timestamp_secs = 0;
    m_timestamp_nsecs = 0;
    m_id = 0;


    m_translation_weight = 0.0;
    m_rotation_weight = 0.0;
    m_type = 0;

}

landmark_msg::~landmark_msg()
{
}

landmark_msg::landmark_msg(const landmark_msg &x)
{
    m_timestamp_secs = x.m_timestamp_secs;
    m_timestamp_nsecs = x.m_timestamp_nsecs;
    m_id = x.m_id;
    m_landmark_to_tracking_transform_translation = x.m_landmark_to_tracking_transform_translation;
    m_landmark_to_tracking_transform_rotation = x.m_landmark_to_tracking_transform_rotation;
    m_translation_weight = x.m_translation_weight;
    m_rotation_weight = x.m_rotation_weight;
    m_type = x.m_type;
    m_code = x.m_code;
}

landmark_msg::landmark_msg(landmark_msg &&x)
{
    m_timestamp_secs = x.m_timestamp_secs;
    m_timestamp_nsecs = x.m_timestamp_nsecs;
    m_id = x.m_id;
    m_landmark_to_tracking_transform_translation = std::move(x.m_landmark_to_tracking_transform_translation);
    m_landmark_to_tracking_transform_rotation = std::move(x.m_landmark_to_tracking_transform_rotation);
    m_translation_weight = x.m_translation_weight;
    m_rotation_weight = x.m_rotation_weight;
    m_type = x.m_type;
    m_code = std::move(x.m_code);
}

landmark_msg& landmark_msg::operator=(const landmark_msg &x)
{
    m_timestamp_secs = x.m_timestamp_secs;
    m_timestamp_nsecs = x.m_timestamp_nsecs;
    m_id = x.m_id;
    m_landmark_to_tracking_transform_translation = x.m_landmark_to_tracking_transform_translation;
    m_landmark_to_tracking_transform_rotation = x.m_landmark_to_tracking_transform_rotation;
    m_translation_weight = x.m_translation_weight;
    m_rotation_weight = x.m_rotation_weight;
    m_type = x.m_type;
    m_code = x.m_code;
    
    return *this;
}

landmark_msg& landmark_msg::operator=(landmark_msg &&x)
{
    m_timestamp_secs = x.m_timestamp_secs;
    m_timestamp_nsecs = x.m_timestamp_nsecs;
    m_id = x.m_id;
    m_landmark_to_tracking_transform_translation = std::move(x.m_landmark_to_tracking_transform_translation);
    m_landmark_to_tracking_transform_rotation = std::move(x.m_landmark_to_tracking_transform_rotation);
    m_translation_weight = x.m_translation_weight;
    m_rotation_weight = x.m_rotation_weight;
    m_type = x.m_type;
    m_code = std::move(x.m_code);
    
    return *this;
}

size_t landmark_msg::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += (3 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += (3 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 1000 + 1;


    return current_alignment - initial_alignment;
}

size_t landmark_msg::getCdrSerializedSize(const landmark_msg& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += (data.landmark_to_tracking_transform_translation().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += (data.landmark_to_tracking_transform_rotation().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.code().size() + 1;


    return current_alignment - initial_alignment;
}

void landmark_msg::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_timestamp_secs;
    scdr << m_timestamp_nsecs;
    scdr << m_id;
    scdr << m_landmark_to_tracking_transform_translation;
    scdr << m_landmark_to_tracking_transform_rotation;
    scdr << m_translation_weight;
    scdr << m_rotation_weight;
    scdr << m_type;
    scdr << m_code;
}

void landmark_msg::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_timestamp_secs;
    dcdr >> m_timestamp_nsecs;
    dcdr >> m_id;
    dcdr >> m_landmark_to_tracking_transform_translation;
    dcdr >> m_landmark_to_tracking_transform_rotation;
    dcdr >> m_translation_weight;
    dcdr >> m_rotation_weight;
    dcdr >> m_type;
    dcdr >> m_code;
}

size_t landmark_msg::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            










    return current_align;
}

bool landmark_msg::isKeyDefined()
{
    return false;
}

void landmark_msg::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
	 
	 
	 
	 
	 
	 
}