// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file collisionavoidance_msg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "collisionavoidance_msg.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

collisionavoidance_msg::collisionavoidance_msg()
{
    m_command = 0;
    m_theta = 0.0;
    m_w = 0;
    m_h = 0;

}

collisionavoidance_msg::~collisionavoidance_msg()
{
}

collisionavoidance_msg::collisionavoidance_msg(const collisionavoidance_msg &x)
{
    m_command = x.m_command;
    m_theta = x.m_theta;
    m_w = x.m_w;
    m_h = x.m_h;
    m_mapdata = x.m_mapdata;
}

collisionavoidance_msg::collisionavoidance_msg(collisionavoidance_msg &&x)
{
    m_command = x.m_command;
    m_theta = x.m_theta;
    m_w = x.m_w;
    m_h = x.m_h;
    m_mapdata = std::move(x.m_mapdata);
}

collisionavoidance_msg& collisionavoidance_msg::operator=(const collisionavoidance_msg &x)
{
    m_command = x.m_command;
    m_theta = x.m_theta;
    m_w = x.m_w;
    m_h = x.m_h;
    m_mapdata = x.m_mapdata;
    
    return *this;
}

collisionavoidance_msg& collisionavoidance_msg::operator=(collisionavoidance_msg &&x)
{
    m_command = x.m_command;
    m_theta = x.m_theta;
    m_w = x.m_w;
    m_h = x.m_h;
    m_mapdata = std::move(x.m_mapdata);
    
    return *this;
}

size_t collisionavoidance_msg::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += (500*500 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t collisionavoidance_msg::getCdrSerializedSize(const collisionavoidance_msg& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += (data.mapdata().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void collisionavoidance_msg::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_command;
    scdr << m_theta;
    scdr << m_w;
    scdr << m_h;
    scdr << m_mapdata;
}

void collisionavoidance_msg::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_command;
    dcdr >> m_theta;
    dcdr >> m_w;
    dcdr >> m_h;
    dcdr >> m_mapdata;
}

size_t collisionavoidance_msg::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            






    return current_align;
}

bool collisionavoidance_msg::isKeyDefined()
{
    return false;
}

void collisionavoidance_msg::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
	 
	 
}