// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file collisionavoidance_msg.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _COLLISIONAVOIDANCE_MSG_H_
#define _COLLISIONAVOIDANCE_MSG_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(collisionavoidance_msg_SOURCE)
#define collisionavoidance_msg_DllAPI __declspec( dllexport )
#else
#define collisionavoidance_msg_DllAPI __declspec( dllimport )
#endif // collisionavoidance_msg_SOURCE
#else
#define collisionavoidance_msg_DllAPI
#endif
#else
#define collisionavoidance_msg_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

/*!
 * @brief This class represents the structure collisionavoidance_msg defined by the user in the IDL file.
 * @ingroup COLLISIONAVOIDANCE_MSG
 */
class collisionavoidance_msg
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport collisionavoidance_msg();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~collisionavoidance_msg();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object collisionavoidance_msg that will be copied.
     */
    eProsima_user_DllExport collisionavoidance_msg(const collisionavoidance_msg &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object collisionavoidance_msg that will be copied.
     */
    eProsima_user_DllExport collisionavoidance_msg(collisionavoidance_msg &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object collisionavoidance_msg that will be copied.
     */
    eProsima_user_DllExport collisionavoidance_msg& operator=(const collisionavoidance_msg &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object collisionavoidance_msg that will be copied.
     */
    eProsima_user_DllExport collisionavoidance_msg& operator=(collisionavoidance_msg &&x);
    
    /*!
     * @brief This function sets a value in member command
     * @param _command New value for member command
     */
    inline eProsima_user_DllExport void command(int32_t _command)
    {
        m_command = _command;
    }

    /*!
     * @brief This function returns the value of member command
     * @return Value of member command
     */
    inline eProsima_user_DllExport int32_t command() const
    {
        return m_command;
    }

    /*!
     * @brief This function returns a reference to member command
     * @return Reference to member command
     */
    inline eProsima_user_DllExport int32_t& command()
    {
        return m_command;
    }
    /*!
     * @brief This function sets a value in member theta
     * @param _theta New value for member theta
     */
    inline eProsima_user_DllExport void theta(float _theta)
    {
        m_theta = _theta;
    }

    /*!
     * @brief This function returns the value of member theta
     * @return Value of member theta
     */
    inline eProsima_user_DllExport float theta() const
    {
        return m_theta;
    }

    /*!
     * @brief This function returns a reference to member theta
     * @return Reference to member theta
     */
    inline eProsima_user_DllExport float& theta()
    {
        return m_theta;
    }
    /*!
     * @brief This function sets a value in member w
     * @param _w New value for member w
     */
    inline eProsima_user_DllExport void w(int32_t _w)
    {
        m_w = _w;
    }

    /*!
     * @brief This function returns the value of member w
     * @return Value of member w
     */
    inline eProsima_user_DllExport int32_t w() const
    {
        return m_w;
    }

    /*!
     * @brief This function returns a reference to member w
     * @return Reference to member w
     */
    inline eProsima_user_DllExport int32_t& w()
    {
        return m_w;
    }
    /*!
     * @brief This function sets a value in member h
     * @param _h New value for member h
     */
    inline eProsima_user_DllExport void h(int32_t _h)
    {
        m_h = _h;
    }

    /*!
     * @brief This function returns the value of member h
     * @return Value of member h
     */
    inline eProsima_user_DllExport int32_t h() const
    {
        return m_h;
    }

    /*!
     * @brief This function returns a reference to member h
     * @return Reference to member h
     */
    inline eProsima_user_DllExport int32_t& h()
    {
        return m_h;
    }
    /*!
     * @brief This function copies the value in member mapdata
     * @param _mapdata New value to be copied in member mapdata
     */
    inline eProsima_user_DllExport void mapdata(const std::vector<uint8_t> &_mapdata)
    {
        m_mapdata = _mapdata;
    }

    /*!
     * @brief This function moves the value in member mapdata
     * @param _mapdata New value to be moved in member mapdata
     */
    inline eProsima_user_DllExport void mapdata(std::vector<uint8_t> &&_mapdata)
    {
        m_mapdata = std::move(_mapdata);
    }

    /*!
     * @brief This function returns a constant reference to member mapdata
     * @return Constant reference to member mapdata
     */
    inline eProsima_user_DllExport const std::vector<uint8_t>& mapdata() const
    {
        return m_mapdata;
    }

    /*!
     * @brief This function returns a reference to member mapdata
     * @return Reference to member mapdata
     */
    inline eProsima_user_DllExport std::vector<uint8_t>& mapdata()
    {
        return m_mapdata;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const collisionavoidance_msg& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    int32_t m_command;
    float m_theta;
    int32_t m_w;
    int32_t m_h;
    std::vector<uint8_t> m_mapdata;
};

#endif // _COLLISIONAVOIDANCE_MSG_H_