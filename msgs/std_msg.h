// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file std_msg.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _COMMANDER_MSG_STD_MSG_H_
#define _COMMANDER_MSG_STD_MSG_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(std_msg_SOURCE)
#define std_msg_DllAPI __declspec( dllexport )
#else
#define std_msg_DllAPI __declspec( dllimport )
#endif // std_msg_SOURCE
#else
#define std_msg_DllAPI
#endif
#else
#define std_msg_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace commander_msg
{
    /*!
     * @brief This class represents the structure StdMsg defined by the user in the IDL file.
     * @ingroup STD_MSG
     */
    class StdMsg
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport StdMsg();
        
        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~StdMsg();
        
        /*!
         * @brief Copy constructor.
         * @param x Reference to the object commander_msg::StdMsg that will be copied.
         */
        eProsima_user_DllExport StdMsg(const StdMsg &x);
        
        /*!
         * @brief Move constructor.
         * @param x Reference to the object commander_msg::StdMsg that will be copied.
         */
        eProsima_user_DllExport StdMsg(StdMsg &&x);
        
        /*!
         * @brief Copy assignment.
         * @param x Reference to the object commander_msg::StdMsg that will be copied.
         */
        eProsima_user_DllExport StdMsg& operator=(const StdMsg &x);
        
        /*!
         * @brief Move assignment.
         * @param x Reference to the object commander_msg::StdMsg that will be copied.
         */
        eProsima_user_DllExport StdMsg& operator=(StdMsg &&x);
        
        /*!
         * @brief This function copies the value in member std_msg
         * @param _std_msg New value to be copied in member std_msg
         */
        inline eProsima_user_DllExport void std_msg(const std::string &_std_msg)
        {
            m_std_msg = _std_msg;
        }

        /*!
         * @brief This function moves the value in member std_msg
         * @param _std_msg New value to be moved in member std_msg
         */
        inline eProsima_user_DllExport void std_msg(std::string &&_std_msg)
        {
            m_std_msg = std::move(_std_msg);
        }

        /*!
         * @brief This function returns a constant reference to member std_msg
         * @return Constant reference to member std_msg
         */
        inline eProsima_user_DllExport const std::string& std_msg() const
        {
            return m_std_msg;
        }

        /*!
         * @brief This function returns a reference to member std_msg
         * @return Reference to member std_msg
         */
        inline eProsima_user_DllExport std::string& std_msg()
        {
            return m_std_msg;
        }
        
        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const commander_msg::StdMsg& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
        
    private:
        std::string m_std_msg;
    };
}

#endif // _COMMANDER_MSG_STD_MSG_H_