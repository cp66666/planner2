// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file MsgModule.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "MsgModule.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

MsgNameSpace::Msg_A::Msg_A()
{
    m_x = 0;

    m_y = 0;


}

MsgNameSpace::Msg_A::~Msg_A()
{
}

MsgNameSpace::Msg_A::Msg_A(const Msg_A &x)
{
    m_x = x.m_x;
    m_y = x.m_y;
}

MsgNameSpace::Msg_A::Msg_A(Msg_A &&x)
{
    m_x = x.m_x;
    m_y = x.m_y;
}

MsgNameSpace::Msg_A& MsgNameSpace::Msg_A::operator=(const Msg_A &x)
{
    m_x = x.m_x;
    m_y = x.m_y;

    return *this;
}

MsgNameSpace::Msg_A& MsgNameSpace::Msg_A::operator=(Msg_A &&x)
{
    m_x = x.m_x;
    m_y = x.m_y;

    return *this;
}

size_t MsgNameSpace::Msg_A::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    return current_alignment - initial_alignment;
}

size_t MsgNameSpace::Msg_A::getCdrSerializedSize(const MsgNameSpace::Msg_A& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    return current_alignment - initial_alignment;
}

void MsgNameSpace::Msg_A::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_x;
    scdr << m_y;
}

void MsgNameSpace::Msg_A::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_x;
    dcdr >> m_y;
}

size_t MsgNameSpace::Msg_A::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            



    return current_align;
}

bool MsgNameSpace::Msg_A::isKeyDefined()
{
    return false;
}

void MsgNameSpace::Msg_A::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
}
MsgNameSpace::Msg_B::Msg_B()
{

    m_index = 0;


}

MsgNameSpace::Msg_B::~Msg_B()
{
}

MsgNameSpace::Msg_B::Msg_B(const Msg_B &x)
{
    m_msgA = x.m_msgA;
    m_index = x.m_index;
}

MsgNameSpace::Msg_B::Msg_B(Msg_B &&x)
{
    m_msgA = std::move(x.m_msgA);
    m_index = x.m_index;
}

MsgNameSpace::Msg_B& MsgNameSpace::Msg_B::operator=(const Msg_B &x)
{
    m_msgA = x.m_msgA;
    m_index = x.m_index;

    return *this;
}

MsgNameSpace::Msg_B& MsgNameSpace::Msg_B::operator=(Msg_B &&x)
{
    m_msgA = std::move(x.m_msgA);
    m_index = x.m_index;

    return *this;
}

size_t MsgNameSpace::Msg_B::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += MsgNameSpace::Msg_A::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t MsgNameSpace::Msg_B::getCdrSerializedSize(const MsgNameSpace::Msg_B& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += MsgNameSpace::Msg_A::getCdrSerializedSize(data.msgA(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void MsgNameSpace::Msg_B::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_msgA;
    scdr << m_index;
}

void MsgNameSpace::Msg_B::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_msgA;
    dcdr >> m_index;
}

size_t MsgNameSpace::Msg_B::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            



    return current_align;
}

bool MsgNameSpace::Msg_B::isKeyDefined()
{
    return false;
}

void MsgNameSpace::Msg_B::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
}
