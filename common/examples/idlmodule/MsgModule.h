// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file MsgModule.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _MSGNAMESPACE_MSGMODULE_H_
#define _MSGNAMESPACE_MSGMODULE_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MsgModule_SOURCE)
#define MsgModule_DllAPI __declspec( dllexport )
#else
#define MsgModule_DllAPI __declspec( dllimport )
#endif // MsgModule_SOURCE
#else
#define MsgModule_DllAPI
#endif
#else
#define MsgModule_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace MsgNameSpace
{
    /*!
     * @brief This class represents the structure Msg_A defined by the user in the IDL file.
     * @ingroup MSGMODULE
     */
    class Msg_A
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Msg_A();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Msg_A();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object MsgNameSpace::Msg_A that will be copied.
         */
        eProsima_user_DllExport Msg_A(const Msg_A &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object MsgNameSpace::Msg_A that will be copied.
         */
        eProsima_user_DllExport Msg_A(Msg_A &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object MsgNameSpace::Msg_A that will be copied.
         */
        eProsima_user_DllExport Msg_A& operator=(const Msg_A &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object MsgNameSpace::Msg_A that will be copied.
         */
        eProsima_user_DllExport Msg_A& operator=(Msg_A &&x);

        /*!
         * @brief This function sets a value in member x
         * @param _x New value for member x
         */
        inline eProsima_user_DllExport void x(int16_t _x)
        {
            m_x = _x;
        }

        /*!
         * @brief This function returns the value of member x
         * @return Value of member x
         */
        inline eProsima_user_DllExport int16_t x() const
        {
            return m_x;
        }

        /*!
         * @brief This function returns a reference to member x
         * @return Reference to member x
         */
        inline eProsima_user_DllExport int16_t& x()
        {
            return m_x;
        }
        /*!
         * @brief This function sets a value in member y
         * @param _y New value for member y
         */
        inline eProsima_user_DllExport void y(int16_t _y)
        {
            m_y = _y;
        }

        /*!
         * @brief This function returns the value of member y
         * @return Value of member y
         */
        inline eProsima_user_DllExport int16_t y() const
        {
            return m_y;
        }

        /*!
         * @brief This function returns a reference to member y
         * @return Reference to member y
         */
        inline eProsima_user_DllExport int16_t& y()
        {
            return m_y;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const MsgNameSpace::Msg_A& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        int16_t m_x;
        int16_t m_y;
    };
    /*!
     * @brief This class represents the structure Msg_B defined by the user in the IDL file.
     * @ingroup MSGMODULE
     */
    class Msg_B
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport Msg_B();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~Msg_B();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object MsgNameSpace::Msg_B that will be copied.
         */
        eProsima_user_DllExport Msg_B(const Msg_B &x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object MsgNameSpace::Msg_B that will be copied.
         */
        eProsima_user_DllExport Msg_B(Msg_B &&x);

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object MsgNameSpace::Msg_B that will be copied.
         */
        eProsima_user_DllExport Msg_B& operator=(const Msg_B &x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object MsgNameSpace::Msg_B that will be copied.
         */
        eProsima_user_DllExport Msg_B& operator=(Msg_B &&x);

        /*!
         * @brief This function copies the value in member msgA
         * @param _msgA New value to be copied in member msgA
         */
        inline eProsima_user_DllExport void msgA(const MsgNameSpace::Msg_A &_msgA)
        {
            m_msgA = _msgA;
        }

        /*!
         * @brief This function moves the value in member msgA
         * @param _msgA New value to be moved in member msgA
         */
        inline eProsima_user_DllExport void msgA(MsgNameSpace::Msg_A &&_msgA)
        {
            m_msgA = std::move(_msgA);
        }

        /*!
         * @brief This function returns a constant reference to member msgA
         * @return Constant reference to member msgA
         */
        inline eProsima_user_DllExport const MsgNameSpace::Msg_A& msgA() const
        {
            return m_msgA;
        }

        /*!
         * @brief This function returns a reference to member msgA
         * @return Reference to member msgA
         */
        inline eProsima_user_DllExport MsgNameSpace::Msg_A& msgA()
        {
            return m_msgA;
        }
        /*!
         * @brief This function sets a value in member index
         * @param _index New value for member index
         */
        inline eProsima_user_DllExport void index(uint32_t _index)
        {
            m_index = _index;
        }

        /*!
         * @brief This function returns the value of member index
         * @return Value of member index
         */
        inline eProsima_user_DllExport uint32_t index() const
        {
            return m_index;
        }

        /*!
         * @brief This function returns a reference to member index
         * @return Reference to member index
         */
        inline eProsima_user_DllExport uint32_t& index()
        {
            return m_index;
        }

        /*!
         * @brief This function returns the maximum serialized size of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(const MsgNameSpace::Msg_B& data, size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

    private:
        MsgNameSpace::Msg_A m_msgA;
        uint32_t m_index;
    };
}

#endif // _MSGNAMESPACE_MSGMODULE_H_