// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file msg_inherit.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "msg_inherit.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

msg_inherit::msg_inherit()
{

    m_tv_sec = 0;

    m_tv_usec = 0;


}

msg_inherit::~msg_inherit()
{
}

msg_inherit::msg_inherit(const msg_inherit &x)
{
    m_imu = x.m_imu;
    m_tv_sec = x.m_tv_sec;
    m_tv_usec = x.m_tv_usec;
}

msg_inherit::msg_inherit(msg_inherit &&x)
{
    m_imu = std::move(x.m_imu);
    m_tv_sec = x.m_tv_sec;
    m_tv_usec = x.m_tv_usec;
}

msg_inherit& msg_inherit::operator=(const msg_inherit &x)
{
    m_imu = x.m_imu;
    m_tv_sec = x.m_tv_sec;
    m_tv_usec = x.m_tv_usec;

    return *this;
}

msg_inherit& msg_inherit::operator=(msg_inherit &&x)
{
    m_imu = std::move(x.m_imu);
    m_tv_sec = x.m_tv_sec;
    m_tv_usec = x.m_tv_usec;

    return *this;
}

size_t msg_inherit::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += msg_base::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t msg_inherit::getCdrSerializedSize(const msg_inherit& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += msg_base::getCdrSerializedSize(data.imu(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void msg_inherit::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_imu;
    scdr << m_tv_sec;
    scdr << m_tv_usec;
}

void msg_inherit::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_imu;
    dcdr >> m_tv_sec;
    dcdr >> m_tv_usec;
}

size_t msg_inherit::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            




    return current_align;
}

bool msg_inherit::isKeyDefined()
{
    return false;
}

void msg_inherit::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
}