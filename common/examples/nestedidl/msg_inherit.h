// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file msg_inherit.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _MSG_INHERIT_H_
#define _MSG_INHERIT_H_

// TODO Poner en el contexto.
#include "msg_base.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(msg_inherit_SOURCE)
#define msg_inherit_DllAPI __declspec( dllexport )
#else
#define msg_inherit_DllAPI __declspec( dllimport )
#endif // msg_inherit_SOURCE
#else
#define msg_inherit_DllAPI
#endif
#else
#define msg_inherit_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

/*!
 * @brief This class represents the structure msg_inherit defined by the user in the IDL file.
 * @ingroup MSG_INHERIT
 */
class msg_inherit
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport msg_inherit();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~msg_inherit();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object msg_inherit that will be copied.
     */
    eProsima_user_DllExport msg_inherit(const msg_inherit &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object msg_inherit that will be copied.
     */
    eProsima_user_DllExport msg_inherit(msg_inherit &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object msg_inherit that will be copied.
     */
    eProsima_user_DllExport msg_inherit& operator=(const msg_inherit &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object msg_inherit that will be copied.
     */
    eProsima_user_DllExport msg_inherit& operator=(msg_inherit &&x);

    /*!
     * @brief This function copies the value in member imu
     * @param _imu New value to be copied in member imu
     */
    inline eProsima_user_DllExport void imu(const msg_base &_imu)
    {
        m_imu = _imu;
    }

    /*!
     * @brief This function moves the value in member imu
     * @param _imu New value to be moved in member imu
     */
    inline eProsima_user_DllExport void imu(msg_base &&_imu)
    {
        m_imu = std::move(_imu);
    }

    /*!
     * @brief This function returns a constant reference to member imu
     * @return Constant reference to member imu
     */
    inline eProsima_user_DllExport const msg_base& imu() const
    {
        return m_imu;
    }

    /*!
     * @brief This function returns a reference to member imu
     * @return Reference to member imu
     */
    inline eProsima_user_DllExport msg_base& imu()
    {
        return m_imu;
    }
    /*!
     * @brief This function sets a value in member tv_sec
     * @param _tv_sec New value for member tv_sec
     */
    inline eProsima_user_DllExport void tv_sec(uint32_t _tv_sec)
    {
        m_tv_sec = _tv_sec;
    }

    /*!
     * @brief This function returns the value of member tv_sec
     * @return Value of member tv_sec
     */
    inline eProsima_user_DllExport uint32_t tv_sec() const
    {
        return m_tv_sec;
    }

    /*!
     * @brief This function returns a reference to member tv_sec
     * @return Reference to member tv_sec
     */
    inline eProsima_user_DllExport uint32_t& tv_sec()
    {
        return m_tv_sec;
    }
    /*!
     * @brief This function sets a value in member tv_usec
     * @param _tv_usec New value for member tv_usec
     */
    inline eProsima_user_DllExport void tv_usec(uint32_t _tv_usec)
    {
        m_tv_usec = _tv_usec;
    }

    /*!
     * @brief This function returns the value of member tv_usec
     * @return Value of member tv_usec
     */
    inline eProsima_user_DllExport uint32_t tv_usec() const
    {
        return m_tv_usec;
    }

    /*!
     * @brief This function returns a reference to member tv_usec
     * @return Reference to member tv_usec
     */
    inline eProsima_user_DllExport uint32_t& tv_usec()
    {
        return m_tv_usec;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const msg_inherit& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    msg_base m_imu;
    uint32_t m_tv_sec;
    uint32_t m_tv_usec;
};

#endif // _MSG_INHERIT_H_